# 机器学习 {style="color:red"}

[![典型建模过程的原理图](images/modeling-process.svg){fig-align="center"}](https://www.tmwr.org/software-modeling#ref-bolstad2004)

## 探索性数据分析

```{r}
library(tidymodels)
data(ames)

ggplot(ames, aes(x = Sale_Price)) + 
  geom_histogram(bins = 50, col= "white")




ames <- ames |>mutate(Sale_Price = log10(Sale_Price))

ggplot(ames, aes(x = Sale_Price)) + 
  geom_histogram(bins = 50, col= "white")+
    geom_vline(xintercept =quantile(ames$Sale_Price),lty=5 )
```

## 拆分训练集、验证集和测试集 `rsample`

### 简单抽样

```{r eval=FALSE}
set.seed(10)
ames_split <- initial_split(ames, prop = c(0.8))
ames_split

ames_train <- training(ames_split)
ames_test  <-  testing(ames_split)
dim(ames_train)
```

### 分层抽样

```{r}
set.seed(100)
ames_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)
ames_train <- training(ames_split)
ames_test  <-  testing(ames_split)

dim(ames_train)
```

### 验证集

```{r eval=FALSE}
set.seed(101)

# To put 60% into training, 20% in validation, and remaining 20% in testing:
ames_split <- initial_validation_split(ames, prop = c(0.6, 0.2),
                                       strata = Sale_Price)
ames_split

ames_train <- training(ames_split)
ames_test <- testing(ames_split)
ames_valid <- validation(ames_split)
```

## 模型选择 `parsnip`

```{r eval=FALSE}
parsnip_addin()
```

```{r}
show_engines('linear_reg')
show_engines("logistic_reg")
```

```{r}
lm_model <- linear_reg() |> 
    set_engine("lm") |> 
    set_mode(mode = "regression")
lm_model

logistic_reg() |>
  set_mode("classification") |>
  set_engine("glm") 

rand_forest(trees = 1000, min_n = 5) |>
  set_engine("ranger", verbose = TRUE) |>
  set_mode("regression") 

decision_tree(min_n = 2) |>
  set_engine("rpart") |>
  set_mode("regression")
```

## 模型工作流 `workflows`

### 线性模型

预处理 `Preprocessor`

```{r}

#  Preprocessor
# None

lm_wflow <- 
  workflow() %>% 
  add_model(lm_model)

lm_wflow


# Formula
lm_wflow <- lm_wflow |> 
    add_formula(Sale_Price ~ Longitude + Latitude)

lm_wflow

#  拟合
lm_fit <- fit(lm_wflow, ames_train)
lm_fit


# 更换公式 再拟合
lm_wflow %>% update_formula(Sale_Price ~ Longitude) |> fit(ames_train)



# Variables:outcomes ~ predictors
lm_wflow <- 
  lm_wflow %>% 
  remove_formula() %>% 
  add_variables(outcomes  = Sale_Price, predictors = c(Longitude, Latitude))  # c(ends_with("tude"))

lm_wflow |> fit(ames_train)


# recepe
```

### 预测

```{r}

# 回归 "numeric" , "conf_int","pred_int","raw".
#  censored regression   "time"，"hazard","survival"
# 分类  "class", "prob",
# "quantile"

# When NULL, predict() will choose an appropriate value based on the model's mode.
predict(lm_fit, ames_test)  # "numeric"
```

### 混合效应模型 `multilevelmod`

```{r}
library(multilevelmod)
multilevel_spec <- linear_reg() %>% set_engine("lmer")
multilevel_spec

df <-  read_delim("data/lme_anova.txt",) |> pivot_longer(cols = 3:7,names_to = "time",values_to = "BP") |> 
    mutate_at(1:3,as.factor)
df
multilevel_workflow <- 
  workflow() %>% 
  add_variables(outcome = BP, predictors = c(induced_method,time,subject)) %>% 
  add_model(multilevel_spec, 
            # This formula is given to the model
            formula = BP ~ induced_method+time + ( 1| subject))

multilevel_workflow
multilevel_workflow |>  fit(data =df) 



```

### 生存模型 `censored`

`type = "time"  type = "survival"   type = "linear_pred"   type = "quantile"   type = "hazard"`

```{r}
library(censored)

parametric_spec <- survival_reg()

parametric_workflow <- 
  workflow() %>% 
  add_variables(outcome = c(fustat, futime), predictors = c(age, rx)) %>% 
  add_model(parametric_spec, 
            formula = Surv(futime, fustat) ~ age + strata(rx))

parametric_fit <- fit(parametric_workflow, data = ovarian)
parametric_fit
```

### 工作流集 `workflowsets`

```{r}
location <- list(
  longitude = Sale_Price ~ Longitude,
  latitude = Sale_Price ~ Latitude,
  coords = Sale_Price ~ Longitude + Latitude,
  neighborhood = Sale_Price ~ Neighborhood
)

library(workflowsets)
location_models <- workflow_set(preproc = location, models = list(lm = lm_model))
location_models
location_models$info[[1]]
extract_workflow(location_models, id = "coords_lm")


location_models <-
   location_models %>%
   mutate(fit = map(info, ~ fit(.x$workflow[[1]], ames_train)))
location_models

location_models$fit[[1]]
```

```{r}
final_lm_res <- last_fit(lm_wflow, ames_split)
final_lm_res
extract_workflow(final_lm_res)

collect_metrics(final_lm_res)
collect_predictions(final_lm_res) %>% slice(1:5)
```

## 特征工程 `recipes`

### 虚拟变量

```{r}
simple_ames <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,
         data = ames_train) %>%
  step_log(Gr_Liv_Area, base = 10) %>% 
  step_dummy(all_nominal_predictors())# 因子或字符变量，名义nominal
# all_numeric_predictors()  all_numeric()  all_predictors()  all_outcomes()

# 跨模型循环使用
simple_ames
```

```{r}
lm_wflow <- 
  lm_wflow %>% 
    #一次只能有一种预处理方法，需要在添加配方之前删除现有的预处理器
  remove_variables() %>% 
  add_recipe(simple_ames)

lm_wflow

lm_fit <- fit(lm_wflow, ames_train)
predict(lm_fit, ames_test)

# 提取模型信息
lm_fit %>% 
  extract_recipe(estimated = TRUE)

lm_fit %>% 
  extract_fit_parsnip() %>% 
  tidy()
```

```{r}

simple_ames <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,
         data = ames_train) %>%
  step_log(Gr_Liv_Area, base = 10) %>% 
  step_other(Neighborhood, threshold = 0.01) %>% 
  step_dummy(all_nominal_predictors())
```

```{r}
ggplot(ames_train, aes(x = Gr_Liv_Area, y = 10^Sale_Price)) + 
  geom_point(alpha = .2) + 
  facet_wrap(~ Bldg_Type) + 
  geom_smooth(method = lm, formula = y ~ x, se = FALSE, color = "blue") + 
  scale_x_log10() + 
  scale_y_log10() + 
  labs(x = "Gross Living Area", y = "Sale Price (USD)")
```

### 交互项

`step_interact(~ interaction terms)` , `+`分隔不同交互效应

```{r}
simple_ames <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,
         data = ames_train) %>%
  step_log(Gr_Liv_Area, base = 10) %>% 
  step_other(Neighborhood, threshold = 0.01) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  # Gr_Liv_Area is on the log scale from a previous step
  step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") )

simple_ames 
```

### 样条函数

添加非线性特征

```{r}
library(patchwork)
library(splines)
plot_smoother <- function(deg_free) {
  ggplot(ames_train, aes(x = Latitude, y = 10^Sale_Price)) + 
    geom_point(alpha = .2) + 
    scale_y_log10() +
    geom_smooth(
      method = lm,
      formula = y ~ ns(x, df = deg_free),# natural splines.
      color = "lightblue",
      se = FALSE
    ) +
    labs(title = paste(deg_free, "Spline Terms"),
         y = "Sale Price (USD)")
}

( plot_smoother(1) + plot_smoother(5) ) / ( plot_smoother(20) + plot_smoother(100) )
```

```{r}
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + Latitude,
         data = ames_train) %>%
  step_ns(Latitude, deg_free = 20)
```

### 特征提取

PCA,

```{r}
  # Use a regular expression to capture house size predictors: 
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + Latitude+Total_Bsmt_SF+First_Flr_SF+Gr_Liv_Area,
         data = ames_train) %>%
    step_pca(matches("(SF$)|(Gr_Liv)"))
```

### 行采样

Downsampling，Upsampling，Hybrid

`step_filter()` `step_sample()` `step_slice()` `step_arrange()` `skip` `TRUE`

```{r eval=FALSE}
library(themis)
step_downsample(outcome_column_name)
```

### 一般转换

`step_mutate()` 比，Bedroom_AbvGr / Full_Bath

### `tidy()`

```{r}
ames_rec <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + 
           Latitude + Longitude, data = ames_train) %>%
  step_log(Gr_Liv_Area, base = 10) %>% 
  step_other(Neighborhood, threshold = 0.01) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>% 
  step_ns(Latitude, Longitude, deg_free = 20)
tidy(ames_rec)
```

```{r}
ames_rec <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + 
           Latitude + Longitude, data = ames_train) %>%
  step_log(Gr_Liv_Area, base = 10) %>% 
  step_other(Neighborhood, threshold = 0.01, id = "my_id") %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>% 
  step_ns(Latitude, Longitude, deg_free = 20)

lm_wflow <- 
  workflow() %>% 
  add_model(lm_model) %>% 
  add_recipe(ames_rec)

lm_fit <- fit(lm_wflow, ames_train)

estimated_recipe <- 
  lm_fit %>% 
  extract_recipe(estimated = TRUE)

tidy(estimated_recipe, id = "my_id")
tidy(estimated_recipe, number = 2)
```

### 列角色

```{r}
ames_rec %>% update_role(Year_Built, new_role = "Street")
```

### 自然语言处理

[textrecipes](https://textrecipes.tidymodels.org/)

## 模型评估 `yardstick`

### 回归指标

```{r}
ames_test_res <- predict(lm_fit, new_data = ames_test %>% select(-Sale_Price))
ames_test_res

ames_test_res <- bind_cols(ames_test_res, ames_test %>% select(Sale_Price))
ames_test_res
```

```{r}
ggplot(ames_test_res, aes(x = Sale_Price, y = .pred)) + 
  # Create a diagonal line:
  geom_abline(lty = 2) + 
  geom_point(alpha = 0.5) + 
  labs(y = "Predicted Sale Price (log10)", x = "Sale Price (log10)") +
  # Scale and size the x- and y-axis uniformly:
  coord_obs_pred()

```

#### 均方根误差RMSE

```{r}
rmse(ames_test_res, truth = Sale_Price, estimate = .pred)
```

#### 决定系数R^2^，平均绝对误差MAE

```{r}
ames_metrics <- metric_set(rmse, rsq, mae)
ames_metrics(ames_test_res, truth = Sale_Price, estimate = .pred)
```

### 二分类指标

```{r}
data(two_class_example)
tibble(two_class_example)
```

```{r}
# 混淆矩阵
# A confusion matrix: 
conf_mat(two_class_example, truth = truth, estimate = predicted)
```

```{r}
# Accuracy:
accuracy(two_class_example, truth, predicted)
```

```{r}
# Matthews correlation coefficient:
mcc(two_class_example, truth, predicted)
```

```{r}
# F1 metric:
f_meas(two_class_example, truth, predicted)
```

```{r}
# Combining these three classification metrics together
classification_metrics <- metric_set(accuracy, mcc, f_meas)
classification_metrics(two_class_example, truth = truth, estimate = predicted)
```

感兴趣 事件水平

第二级逻辑将结果编码为0/1（在这种情况下，第二个值是事件）

```{r}
f_meas(two_class_example, truth, predicted, event_level = "second")
```

#### ROC，AUC

不使用预测类列,对于两类问题，感兴趣事件的概率列将传递到函数中

```{r}
two_class_curve <- roc_curve(two_class_example, truth, Class1)
two_class_curve
roc_auc(two_class_example, truth, Class1)
```

```{r}
autoplot(two_class_curve)+
    annotate("text",x=0.5,y=0.25,label="AUC=0.939")
```

### 多分类指标

```{r}
data(hpc_cv)
tibble(hpc_cv)
```

```{r}
accuracy(hpc_cv, obs, pred)
mcc(hpc_cv, obs, pred)
```

二分类可拓展到多分类

```{r}
sensitivity(hpc_cv, obs, pred, estimator = "macro")
sensitivity(hpc_cv, obs, pred, estimator = "macro_weighted")
sensitivity(hpc_cv, obs, pred, estimator = "micro")
```

多分类

```{r}
roc_auc(hpc_cv, obs, VF, F, M, L)
roc_auc(hpc_cv, obs, VF, F, M, L, estimator = "macro_weighted")
```

```{r}
hpc_cv %>% 
  group_by(Resample) %>% 
  accuracy(obs, pred)

# Four 1-vs-all ROC curves for each fold
hpc_cv %>% 
  group_by(Resample) %>% 
  roc_curve(obs, VF, F, M, L) %>% 
  autoplot()
```

## 重采样 `rsample`

```{r}
ames_rec
```

```{r}
rf_model <- 
  rand_forest(trees = 1000) %>% 
  set_engine("ranger") %>% 
  set_mode("regression")

rf_wflow <- 
  workflow() %>% 
  add_formula(
    Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + 
      Latitude + Longitude) %>% 
  add_model(rf_model) 

rf_fit <- rf_wflow %>% fit(data = ames_train)
```

```{r}
estimate_perf <- function(model, dat) {
  # Capture the names of the `model` and `dat` objects
  cl <- match.call()
  obj_name <- as.character(cl$model)
  data_name <- as.character(cl$dat)
  data_name <- gsub("ames_", "", data_name)
  
  # Estimate these metrics:
  reg_metrics <- metric_set(rmse, rsq)
  
  model %>%
    predict(dat) %>%
    bind_cols(dat %>% select(Sale_Price)) %>%
    reg_metrics(Sale_Price, .pred) %>%
    select(-.estimator) %>%
    mutate(object = obj_name, data = data_name)
}

estimate_perf(rf_fit, ames_train)
estimate_perf(lm_fit, ames_train)
```

```{r}
estimate_perf(rf_fit, ames_test)
```

[![](images/resampling.svg){fig-align="center"}](https://www.tmwr.org/premade/resampling.svg)

### 交叉验证

*V*-fold cross-validation，数据被随机划分为样本量大致相等的*V*组（称为折叠），例如10重交叉验证

```{r}
set.seed(1001)
# 10-fold cross-validation
ames_folds <- vfold_cv(ames_train, v = 10)

# 分析集/评估集
ames_folds


# 检索分区数据
ames_folds$splits[[1]] %>% analysis() |> dim()
```

`model_spec %>% fit_resamples(formula, resamples, ...)`

`model_spec %>% fit_resamples(recipe, resamples, ...)`

`workflow %>% fit_resamples( resamples, ...)`

```{r}
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)

set.seed(1003)
rf_res <- 
  rf_wflow %>% 
  fit_resamples(resamples = ames_folds, control = keep_pred)
rf_res
collect_metrics(rf_res)
collect_metrics(rf_res,summarize = F)
assess_res <- collect_predictions(rf_res)
assess_res
```

```{r}
assess_res %>% 
  ggplot(aes(x = Sale_Price, y = .pred)) + 
  geom_point(alpha = .15) +
  geom_abline(color = "red") + 
  coord_obs_pred() + 
  ylab("Predicted")
```

```{r}
# 找到残差最大的2个
over_predicted <- 
  assess_res %>% 
  mutate(residual = Sale_Price - .pred) %>% 
  arrange(desc(abs(residual))) %>% 
  slice(1:2)
over_predicted

ames_train %>% 
  slice(over_predicted$.row) %>% 
  select(Gr_Liv_Area, Neighborhood, Year_Built, Bedroom_AbvGr, Full_Bath)
```

重复交叉验证

```{r}
# 10-fold cross-validation repeated 5 times 
vfold_cv(ames_train, v = 10, repeats = 5)

```

留一交叉验证

leave-one-out (LOO) cross-validation

`loo_cv()`

蒙特卡罗交叉验证

Monte Carlo cross-validation，MCCV，将固定比例的数据分配给分析集和评估集。该比例的数据每次都是随机选择的，导致评估集不相互排斥

```{r}
mc_cv(ames_train, prop = 9/10, times = 20)
```

### 验证集

```{r}
set.seed(101)

# To put 60% into training, 20% in validation, and remaining 20% in testing:
ames_validation_split <- initial_validation_split(ames, prop = c(0.6, 0.2))
ames_validation_split


# Object used for resampling: 
val_set <- validation_set(ames_validation_split)
val_set
```

```{r}
val_res <- rf_wflow %>% fit_resamples(resamples = val_set)
val_res
collect_metrics(val_res)
```

### 自助法

Bootstrap resampling

replacement

*out-of-bag* sample

```{r}
bootstraps(ames_train, times = 5)
```

### Rolling forecast origin resampling

滚动预测原点重采样

时间序列数据

```{r}
time_slices <- 
  tibble(x = 1:365) %>% 
  rolling_origin(initial = 6 * 30, assess = 30, skip = 29, cumulative = FALSE)

data_range <- function(x) {
  summarize(x, first = min(x), last = max(x))
}

map_dfr(time_slices$splits, ~   analysis(.x) %>% data_range())

map_dfr(time_slices$splits, ~ assessment(.x) %>% data_range())

```

### 并行计算

```{r}
parallel::detectCores(logical = FALSE)
parallel::detectCores(logical = TRUE)
```

### 保存重采样对象

```{r}
ames_rec <- 
  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type + 
           Latitude + Longitude, data = ames_train) %>%
  step_other(Neighborhood, threshold = 0.01) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>% 
  step_ns(Latitude, Longitude, deg_free = 20)

lm_wflow <-  
  workflow() %>% 
  add_recipe(ames_rec) %>% 
  add_model(linear_reg() %>% set_engine("lm")) 

lm_fit <- lm_wflow %>% fit(data = ames_train)

# Select the recipe: 
extract_recipe(lm_fit, estimated = TRUE)
```

```{r}
get_model <- function(x) {
  extract_fit_parsnip(x) %>% tidy()
}

get_model(lm_fit)
```

```{r}
ctrl <- control_resamples(extract = get_model)

lm_res <- lm_wflow %>%  fit_resamples(resamples = ames_folds, control = ctrl)
lm_res
```

```{r}
lm_res$.extracts[[1]]

lm_res$.extracts[[1]][[1]]
```

```{r}
all_coef <- map_dfr(lm_res$.extracts, ~ .x[[1]][[1]])
# Show the replicates for a single predictor:
filter(all_coef, term == "Year_Built")
```
