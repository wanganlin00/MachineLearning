# 分类

## 支持向量机

**支持向量机（Support Vector Machine, SVM）**：用于二分类和多分类问题，寻找最佳决策边界。

## K-Nearest Neighbors

```{r}
Smarket <- read_csv("data/Smarket.csv")
Smarket$Direction <- factor(Smarket$Direction)
head(Smarket)
```

```{r}
knn_spec <- nearest_neighbor(neighbors = 3) |> 
  set_mode("classification") |> 
  set_engine("kknn")

knn_fit <- knn_spec |>
  fit(Direction ~ Lag1 + Lag2, data = Smarket)

knn_fit

```

```{r}
augment(knn_fit, new_data = Smarket) |> 
  conf_mat(truth = Direction, estimate = .pred_class) 
```

```{r}
augment(knn_fit, new_data = Smarket) |>
  accuracy(truth = Direction, estimate = .pred_class) 
```

## LDA

```{r}
lda_spec <- discrim_linear() %>%
  set_mode("classification") %>%
  set_engine("MASS")
lda_fit <- lda_spec %>%
  fit(Direction ~ Lag1 + Lag2, data = Smarket)

lda_fit
```

## 模型比较

```{r}
models <- list("LDA" = lda_fit,
               "KNN" = knn_fit)
preds <- imap_dfr(models, augment, 
                  new_data = Smarket, .id = "model")

preds %>%
  dplyr::select(model, Direction, .pred_class, .pred_Down, .pred_Up)
```

### 灵敏度和特异性

```{r}
multi_metric <- metric_set( sensitivity, specificity)  # accuracy


preds %>%
  group_by(model) %>%
  multi_metric(truth = Direction, estimate = .pred_class)
```

### ROC 曲线

```{r}
preds %>%
  group_by(model) %>%
  roc_curve(Direction, .pred_Down) %>%
  autoplot()
```

## **朴素贝叶斯**

**朴素贝叶斯（Naive Bayes）**：基于贝叶斯定理的简单而高效的分类算法。

## 基于树的模型

-   **决策树（Decision Tree）**：基于树状模型进行决策的分类算法。

-   **随机森林（Random Forest）**：由多棵决策树组成的集成学习模型。

-   **梯度提升树（Gradient Boosting Trees）**：通过加法模型和前向分步算法实现的集成学习模型。
